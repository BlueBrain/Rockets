/* Copyright (c) 2018, EPFL/Blue Brain Project
 *                     Raphael.Dumusc@epfl.ch
 *
 * This file is part of Rockets <https://github.com/BlueBrain/Rockets>
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License version 3.0 as published
 * by the Free Software Foundation.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this library; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#ifndef ROCKETS_DEBUG_H
#define ROCKETS_DEBUG_H

#include <libwebsockets.h>

#include <iostream>
#include <string>

namespace rockets
{
inline std::string to_string(const lws_callback_reasons reason)
{
    // clang-format off
    switch (reason)
    {
    case LWS_CALLBACK_ESTABLISHED: return "LWS_CALLBACK_ESTABLISHED";
    case LWS_CALLBACK_CLIENT_CONNECTION_ERROR: return "LWS_CALLBACK_CLIENT_CONNECTION_ERROR";
    case LWS_CALLBACK_CLIENT_FILTER_PRE_ESTABLISH: return "LWS_CALLBACK_CLIENT_FILTER_PRE_ESTABLISH";
    case LWS_CALLBACK_CLIENT_ESTABLISHED: return "LWS_CALLBACK_CLIENT_ESTABLISHED";
    case LWS_CALLBACK_CLOSED: return "LWS_CALLBACK_CLOSED";
    case LWS_CALLBACK_CLOSED_HTTP: return "LWS_CALLBACK_CLOSED_HTTP";
    case LWS_CALLBACK_RECEIVE: return "LWS_CALLBACK_RECEIVE";
    case LWS_CALLBACK_RECEIVE_PONG: return "LWS_CALLBACK_RECEIVE_PONG";
    case LWS_CALLBACK_CLIENT_RECEIVE: return "LWS_CALLBACK_CLIENT_RECEIVE";
    case LWS_CALLBACK_CLIENT_RECEIVE_PONG: return "LWS_CALLBACK_CLIENT_RECEIVE_PONG";
    case LWS_CALLBACK_CLIENT_WRITEABLE: return "LWS_CALLBACK_CLIENT_WRITEABLE";
    case LWS_CALLBACK_SERVER_WRITEABLE: return "LWS_CALLBACK_SERVER_WRITEABLE";
    case LWS_CALLBACK_HTTP: return "LWS_CALLBACK_HTTP";
    case LWS_CALLBACK_HTTP_BODY: return "LWS_CALLBACK_HTTP_BODY";
    case LWS_CALLBACK_HTTP_BODY_COMPLETION: return "LWS_CALLBACK_HTTP_BODY_COMPLETION";
    case LWS_CALLBACK_HTTP_FILE_COMPLETION: return "LWS_CALLBACK_HTTP_FILE_COMPLETION";
    case LWS_CALLBACK_HTTP_WRITEABLE: return "LWS_CALLBACK_HTTP_WRITEABLE";
    case LWS_CALLBACK_FILTER_NETWORK_CONNECTION: return "LWS_CALLBACK_FILTER_NETWORK_CONNECTION";
    case LWS_CALLBACK_FILTER_HTTP_CONNECTION: return "LWS_CALLBACK_FILTER_HTTP_CONNECTION";
    case LWS_CALLBACK_SERVER_NEW_CLIENT_INSTANTIATED: return "LWS_CALLBACK_SERVER_NEW_CLIENT_INSTANTIATED";
    case LWS_CALLBACK_FILTER_PROTOCOL_CONNECTION: return "LWS_CALLBACK_FILTER_PROTOCOL_CONNECTION";
    case LWS_CALLBACK_OPENSSL_LOAD_EXTRA_CLIENT_VERIFY_CERTS: return "LWS_CALLBACK_OPENSSL_LOAD_EXTRA_CLIENT_VERIFY_CERTS";
    case LWS_CALLBACK_OPENSSL_LOAD_EXTRA_SERVER_VERIFY_CERTS: return "LWS_CALLBACK_OPENSSL_LOAD_EXTRA_SERVER_VERIFY_CERTS";
    case LWS_CALLBACK_OPENSSL_PERFORM_CLIENT_CERT_VERIFICATION: return "LWS_CALLBACK_OPENSSL_PERFORM_CLIENT_CERT_VERIFICATION";
    case LWS_CALLBACK_CLIENT_APPEND_HANDSHAKE_HEADER: return "LWS_CALLBACK_CLIENT_APPEND_HANDSHAKE_HEADER";
    case LWS_CALLBACK_CONFIRM_EXTENSION_OKAY: return "LWS_CALLBACK_CONFIRM_EXTENSION_OKAY";
    case LWS_CALLBACK_CLIENT_CONFIRM_EXTENSION_SUPPORTED: return "LWS_CALLBACK_CLIENT_CONFIRM_EXTENSION_SUPPORTED";
    case LWS_CALLBACK_PROTOCOL_INIT: return "LWS_CALLBACK_PROTOCOL_INIT";
    case LWS_CALLBACK_PROTOCOL_DESTROY: return "LWS_CALLBACK_PROTOCOL_DESTROY";
    case LWS_CALLBACK_WSI_CREATE: return "LWS_CALLBACK_WSI_CREATE";
    case LWS_CALLBACK_WSI_DESTROY: return "LWS_CALLBACK_WSI_DESTROY";
    case LWS_CALLBACK_GET_THREAD_ID: return "LWS_CALLBACK_GET_THREAD_ID";
    case LWS_CALLBACK_ADD_POLL_FD: return "LWS_CALLBACK_ADD_POLL_FD";
    case LWS_CALLBACK_DEL_POLL_FD: return "LWS_CALLBACK_DEL_POLL_FD";
    case LWS_CALLBACK_CHANGE_MODE_POLL_FD: return "LWS_CALLBACK_CHANGE_MODE_POLL_FD";
    case LWS_CALLBACK_LOCK_POLL: return "LWS_CALLBACK_LOCK_POLL";
    case LWS_CALLBACK_UNLOCK_POLL: return "LWS_CALLBACK_UNLOCK_POLL";
    case LWS_CALLBACK_OPENSSL_CONTEXT_REQUIRES_PRIVATE_KEY: return "LWS_CALLBACK_OPENSSL_CONTEXT_REQUIRES_PRIVATE_KEY";
    case LWS_CALLBACK_WS_PEER_INITIATED_CLOSE: return "LWS_CALLBACK_WS_PEER_INITIATED_CLOSE";
    case LWS_CALLBACK_WS_EXT_DEFAULTS: return "LWS_CALLBACK_WS_EXT_DEFAULTS";
    case LWS_CALLBACK_CGI: return "LWS_CALLBACK_CGI";
    case LWS_CALLBACK_CGI_TERMINATED: return "LWS_CALLBACK_CGI_TERMINATED";
    case LWS_CALLBACK_CGI_STDIN_DATA: return "LWS_CALLBACK_CGI_STDIN_DATA";
    case LWS_CALLBACK_CGI_STDIN_COMPLETED: return "LWS_CALLBACK_CGI_STDIN_COMPLETED";
    case LWS_CALLBACK_ESTABLISHED_CLIENT_HTTP: return "LWS_CALLBACK_ESTABLISHED_CLIENT_HTTP";
    case LWS_CALLBACK_CLOSED_CLIENT_HTTP: return "LWS_CALLBACK_CLOSED_CLIENT_HTTP";
    case LWS_CALLBACK_RECEIVE_CLIENT_HTTP: return "LWS_CALLBACK_RECEIVE_CLIENT_HTTP";
    case LWS_CALLBACK_COMPLETED_CLIENT_HTTP: return "LWS_CALLBACK_COMPLETED_CLIENT_HTTP";
    case LWS_CALLBACK_RECEIVE_CLIENT_HTTP_READ: return "LWS_CALLBACK_RECEIVE_CLIENT_HTTP_READ";
#if LWS_LIBRARY_VERSION_NUMBER >= 2001000
    case LWS_CALLBACK_HTTP_BIND_PROTOCOL: return "LWS_CALLBACK_HTTP_BIND_PROTOCOL";
    case LWS_CALLBACK_HTTP_DROP_PROTOCOL: return "LWS_CALLBACK_HTTP_DROP_PROTOCOL";
    case LWS_CALLBACK_CHECK_ACCESS_RIGHTS: return "LWS_CALLBACK_CHECK_ACCESS_RIGHTS";
    case LWS_CALLBACK_PROCESS_HTML: return "LWS_CALLBACK_PROCESS_HTML";
    case LWS_CALLBACK_ADD_HEADERS: return "LWS_CALLBACK_ADD_HEADERS";
    case LWS_CALLBACK_SESSION_INFO: return "LWS_CALLBACK_SESSION_INFO";
    case LWS_CALLBACK_GS_EVENT: return "LWS_CALLBACK_GS_EVENT";
    case LWS_CALLBACK_HTTP_PMO: return "LWS_CALLBACK_HTTP_PMO";
    case LWS_CALLBACK_CLIENT_HTTP_WRITEABLE: return "LWS_CALLBACK_CLIENT_HTTP_WRITEABLE";
#if LWS_LIBRARY_VERSION_NUMBER >= 2002000
    case LWS_CALLBACK_OPENSSL_PERFORM_SERVER_CERT_VERIFICATION: return "LWS_CALLBACK_OPENSSL_PERFORM_SERVER_CERT_VERIFICATION";
    case LWS_CALLBACK_RAW_RX: return "LWS_CALLBACK_RAW_RX";
    case LWS_CALLBACK_RAW_CLOSE: return "LWS_CALLBACK_RAW_CLOSE";
    case LWS_CALLBACK_RAW_WRITEABLE: return "LWS_CALLBACK_RAW_WRITEABLE";
    case LWS_CALLBACK_RAW_ADOPT: return "LWS_CALLBACK_RAW_ADOPT";
    case LWS_CALLBACK_RAW_ADOPT_FILE: return "LWS_CALLBACK_RAW_ADOPT_FILE";
    case LWS_CALLBACK_RAW_RX_FILE: return "LWS_CALLBACK_RAW_RX_FILE";
    case LWS_CALLBACK_RAW_WRITEABLE_FILE: return "LWS_CALLBACK_RAW_WRITEABLE_FILE";
    case LWS_CALLBACK_RAW_CLOSE_FILE: return "LWS_CALLBACK_RAW_CLOSE_FILE";
#if LWS_LIBRARY_VERSION_NUMBER >= 2003000
    case LWS_CALLBACK_SSL_INFO: return "LWS_CALLBACK_SSL_INFO";
#if LWS_LIBRARY_VERSION_NUMBER <= 3000000
    case LWS_CALLBACK_CHILD_WRITE_VIA_PARENT: return "LWS_CALLBACK_CHILD_WRITE_VIA_PARENT";
#endif
    case LWS_CALLBACK_CHILD_CLOSING: return "LWS_CALLBACK_CHILD_CLOSING";
#if LWS_LIBRARY_VERSION_NUMBER >= 2004000
    case LWS_CALLBACK_CGI_PROCESS_ATTACH: return "LWS_CALLBACK_CGI_PROCESS_ATTACH";
#if LWS_LIBRARY_VERSION_NUMBER >= 3000000
    case LWS_CALLBACK_VHOST_CERT_AGING: return "LWS_CALLBACK_VHOST_CERT_AGING";
    case LWS_CALLBACK_VHOST_CERT_UPDATE: return "LWS_CALLBACK_VHOST_CERT_UPDATE";
#endif
#endif
#endif
#endif
#endif
    default: return std::string("UNKNOWN (") + std::to_string((int)reason) + ")";
    }
    // clang-format on
}
}

#endif
